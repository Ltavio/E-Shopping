openapi: 3.0.3
info:
  title: E-Shopping API
  version: 1.0.0
  description: Your project description
paths:
  /api/access/{user_id}/:
    put:
      operationId: access_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - access
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: access_partial_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - access
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/address/sellers/{seller_id}/:
    get:
      operationId: address_sellers_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: path
        name: seller_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - address
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAddressSellerList'
          description: ''
    post:
      operationId: address_sellers_create
      parameters:
      - in: path
        name: seller_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressSeller'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddressSeller'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddressSeller'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressSeller'
          description: ''
  /api/address/users/:
    get:
      operationId: address_users_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - address
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAddressUserList'
          description: ''
    post:
      operationId: address_users_create
      tags:
      - address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddressUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddressUser'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressUser'
          description: ''
  /api/category/:
    get:
      operationId: category_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - category
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
    post:
      operationId: category_create
      tags:
      - category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/category/{category_id}/:
    get:
      operationId: category_retrieve
      parameters:
      - in: path
        name: category_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - category
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: category_update
      parameters:
      - in: path
        name: category_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: category_partial_update
      parameters:
      - in: path
        name: category_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: category_destroy
      parameters:
      - in: path
        name: category_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - category
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/category/{category_id}/restore/:
    post:
      operationId: category_restore_create
      parameters:
      - in: path
        name: category_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - category
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/login/:
    post:
      operationId: login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/login/refresh/:
    post:
      operationId: login_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/order/:
    get:
      operationId: order_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
  /api/order/{order_id}/:
    get:
      operationId: order_retrieve
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: order_update
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: order_partial_update
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: order_destroy
      parameters:
      - in: path
        name: order_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - order
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/product/:
    get:
      operationId: product_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - product
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: product_create
      tags:
      - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/product/{product_id}/:
    get:
      operationId: product_retrieve
      parameters:
      - in: path
        name: product_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - product
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: product_update
      parameters:
      - in: path
        name: product_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: product_partial_update
      parameters:
      - in: path
        name: product_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: product_destroy
      parameters:
      - in: path
        name: product_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - product
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/product/category/{category_id}/:
    get:
      operationId: product_category_retrieve
      parameters:
      - in: path
        name: category_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - product
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/product/order_product/:
    get:
      operationId: product_order_product_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - product
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderProductList'
          description: ''
    post:
      operationId: product_order_product_create
      tags:
      - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderProduct'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderProduct'
          description: ''
  /api/product/order_product/{order_product_id}/:
    get:
      operationId: product_order_product_retrieve
      parameters:
      - in: path
        name: order_product_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - product
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderProduct'
          description: ''
    put:
      operationId: product_order_product_update
      parameters:
      - in: path
        name: order_product_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderProduct'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderProduct'
          description: ''
    patch:
      operationId: product_order_product_partial_update
      parameters:
      - in: path
        name: order_product_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderProduct'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderProduct'
          description: ''
    delete:
      operationId: product_order_product_destroy
      parameters:
      - in: path
        name: order_product_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - product
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/sellers/:
    get:
      operationId: sellers_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - sellers
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSellerList'
          description: ''
    post:
      operationId: sellers_create
      tags:
      - sellers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Seller'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Seller'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Seller'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
          description: ''
  /api/sellers/{seller_id}/:
    get:
      operationId: sellers_retrieve
      parameters:
      - in: path
        name: seller_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - sellers
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
          description: ''
    put:
      operationId: sellers_update
      parameters:
      - in: path
        name: seller_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - sellers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Seller'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Seller'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Seller'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
          description: ''
    patch:
      operationId: sellers_partial_update
      parameters:
      - in: path
        name: seller_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - sellers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSeller'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSeller'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSeller'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Seller'
          description: ''
    delete:
      operationId: sellers_destroy
      parameters:
      - in: path
        name: seller_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - sellers
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/sellers/{seller_id}/restore/:
    post:
      operationId: sellers_restore_create
      parameters:
      - in: path
        name: seller_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - sellers
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/users/:
    get:
      operationId: users_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{user_id}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/{user_id}/restore/:
    post:
      operationId: users_restore_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    AddressSeller:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        city:
          type: string
          maxLength: 150
        state:
          type: string
          maxLength: 150
        zip_code:
          type: integer
        district:
          type: string
          maxLength: 150
        number:
          type: integer
        complement:
          type: string
          maxLength: 150
        created_at:
          type: string
          format: date-time
          readOnly: true
        update_at:
          type: string
          format: date-time
          readOnly: true
        seller:
          allOf:
          - $ref: '#/components/schemas/Seller'
          readOnly: true
      required:
      - city
      - complement
      - created_at
      - district
      - id
      - number
      - seller
      - state
      - update_at
      - zip_code
    AddressUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        city:
          type: string
          maxLength: 150
        state:
          type: string
          maxLength: 150
        zip_code:
          type: integer
        district:
          type: string
          maxLength: 150
        number:
          type: integer
        complement:
          type: string
          maxLength: 150
        created_at:
          type: string
          format: date-time
          readOnly: true
        update_at:
          type: string
          format: date-time
          readOnly: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - city
      - complement
      - created_at
      - district
      - id
      - number
      - state
      - update_at
      - users
      - zip_code
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 150
        description:
          type: string
          nullable: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        is_deleted:
          type: boolean
        products:
          type: array
          items:
            type: string
            format: uuid
          readOnly: true
      required:
      - created_at
      - id
      - products
      - updated_at
    Nested:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        city:
          type: string
          maxLength: 150
        state:
          type: string
          maxLength: 150
        zip_code:
          type: integer
        district:
          type: string
          maxLength: 150
        number:
          type: integer
        complement:
          type: string
          maxLength: 150
        created_at:
          type: string
          format: date-time
          readOnly: true
        update_at:
          type: string
          format: date-time
          readOnly: true
        users:
          type: array
          items:
            type: string
            format: uuid
        sellers:
          type: array
          items:
            type: string
            format: uuid
      required:
      - city
      - complement
      - created_at
      - district
      - id
      - number
      - sellers
      - state
      - update_at
      - users
      - zip_code
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        address:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        order_products:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - address
      - created_at
      - id
      - order_products
      - products
      - updated_at
    OrderProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        quantity_product:
          type: integer
          nullable: true
        order:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - id
      - order
      - product
    PaginatedAddressSellerList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/AddressSeller'
    PaginatedAddressUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/AddressUser'
    PaginatedCategoryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedOrderList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedOrderProductList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderProduct'
    PaginatedProductList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedSellerList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Seller'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 150
        description:
          type: string
          nullable: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        is_deleted:
          type: boolean
        products:
          type: array
          items:
            type: string
            format: uuid
          readOnly: true
    PatchedOrder:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        address:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        order_products:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
    PatchedOrderProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        quantity_product:
          type: integer
          nullable: true
        order:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
    PatchedProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name_product:
          type: string
          nullable: true
          maxLength: 150
        description:
          type: string
          nullable: true
        is_active:
          type: boolean
        price:
          type: number
          format: double
          nullable: true
          title: '2'
        stock:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        category:
          type: string
          format: uuid
        quantity:
          type: integer
          writeOnly: true
          default: 1
    PatchedSeller:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        company_name:
          type: string
          maxLength: 150
        cnpj:
          type: string
          maxLength: 14
        is_active:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        is_deleted:
          type: boolean
        client:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        cpf:
          type: string
          maxLength: 11
        phone:
          type: string
          maxLength: 13
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        is_seller:
          type: boolean
        is_deleted:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name_product:
          type: string
          nullable: true
          maxLength: 150
        description:
          type: string
          nullable: true
        is_active:
          type: boolean
        price:
          type: number
          format: double
          nullable: true
          title: '2'
        stock:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        category:
          type: string
          format: uuid
        quantity:
          type: integer
          writeOnly: true
          default: 1
      required:
      - category
      - created_at
      - id
      - stock
    Seller:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        company_name:
          type: string
          maxLength: 150
        cnpj:
          type: string
          maxLength: 14
        is_active:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        is_deleted:
          type: boolean
        client:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
      required:
      - client
      - cnpj
      - company_name
      - created_at
      - id
      - is_active
      - updated_at
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        cpf:
          type: string
          maxLength: 11
        phone:
          type: string
          maxLength: 13
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        is_seller:
          type: boolean
        is_deleted:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
      required:
      - cpf
      - created_at
      - email
      - id
      - is_active
      - is_superuser
      - password
      - phone
      - updated_at
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
